issue - if none of that makes it fast enough, add a pipeline stage
  the only absolute requirements are:
    the feedback from ready=>ready is 1 cycle
    the feedback from issued<=>pending is 1 cycle
  ... can thus decouple the "ready" stage and the "schedule" stage
  => increases the MINIMUM latency to 2 (for adders/etc)
  ... is a last resort!

renamer - if optimizing copies: leave them in place for commit to see

-- For memory unit (later):
-- B+W are always in-order
-- R is allowed to commute freely, EXCEPT:
-- it may only skip at most 'x' Ws

-- Assumption: reads are side-effect free (even on devices!)
-- Write-through cache ... want spills to be hot
-- reads specify if they can be cached and how far they commute
-- ... how does this interact with calling ABI? (callee/caller-saved)

---------------------------------------------------------------------------------------------------------------------

 64-bit adder at 333 MHz ... works!
128-bit adder at 200 MHz ... works!

TODO:
  need to pipeline the multiplier to reach 200 range ...
  eliminate num_wait from arbitration
  remove 3D arrays from arbitration
----
memory unit
fetcher
branches
